import logging

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from tg_bot import user_channel_settings_api, user_channel_api
from tg_bot.aiogram_bot.keyboards.inline.subscription_payment.inline_button import subscription_payment_clb
from tg_bot.aiogram_bot.network.dto.response import Response
from tg_bot.aiogram_bot.network.dto.user_channel import UserChannelSchema
from tg_bot.aiogram_bot.utils.constants import Support


async def subscription_finished(state: FSMContext, p: str):
    data = await state.get_data()
    channel_ids = []

    if 'channel_ids' in data:
        channel_ids = data['channel_ids']

    call = types.CallbackQuery.get_current()
    markup = InlineKeyboardMarkup(row_width=1)

    if p == "dis":
        text = f'''
<b>üö® –í–∞—à–∞ –ü–æ–¥–ø–∏—Å–∫–∞ –ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!</b>\n
–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤–∞—à–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Harvestly –∏—Å—Ç–µ–∫–ª–∞. –ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏!\n\n–í—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –ø—Ä–æ–¥–ª–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏!\n\n‚úÖ  –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –Ω–∞—à–∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n
‚úÖ –ü–æ–ª—É—á–∞–π—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è.\n\n‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n\n–ú—ã —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–Ω–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!\n\n–î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {Support}\n\nüéÅ –í –∑–Ω–∞–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É –Ω–∞ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏!
        '''

        discount_button = InlineKeyboardButton(
            text="üéÅ –°–∫–∏–¥–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É 50%",
            callback_data=subscription_payment_clb.new(
                a="c",
                p=p,
                t="p"
            )
        )
        markup.add(discount_button)

    elif p == "n_dis":
        text = f'''
<b>üö® –í–∞—à–∞ –ü–æ–¥–ø–∏—Å–∫–∞ –ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!</b>\n
–ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å, –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –ø—Ä–æ–¥–ª–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏!\n\n‚úÖ  –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –Ω–∞—à–∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n
‚úÖ –ü–æ–ª—É—á–∞–π—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è.\n\n‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n\n–ú—ã —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–Ω–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!\n\n–î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {Support}
        '''

        payment_button = InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üí∞",
            callback_data=subscription_payment_clb.new(
                a="c",
                p=p,
                t="p"
            )
        )
        markup.add(payment_button)

    back_button = InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é",
        callback_data=subscription_payment_clb.new(
            a="c",
            p=p,
            t="f"
        )
    )

    markup.add(back_button)

    if len(channel_ids) > 0:
        success = Response[bool].model_validate(await user_channel_settings_api.update_subscription_id_by_channel_ids(
            data={
                "channel_ids": channel_ids,
                "new_subscription_id": None,
                'created': None,
                'finished': None
            }
        ))
        if not success:
            return

        user_channel_response: Response[list[UserChannelSchema]] = Response[list[UserChannelSchema]].model_validate(
            await user_channel_api.find_by_channels_id(data={"ids": channel_ids})
        )
        for user_channel in user_channel_response.data:
            try:
                await call.bot.send_message(user_channel.user_id, text, reply_markup=markup)
            except Exception as e:
                logging.error(f"subscription_finished {e}")

    else:
        await call.bot.edit_message_text(
            text=text,
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
