import json
from datetime import datetime, timedelta, timezone

import aiohttp
from aiogram import Dispatcher
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart

from tg_bot import config, user_api
from tg_bot.aiogram_bot.keyboards.default.language import lang
from tg_bot.aiogram_bot.keyboards.default.main_menu import m_menu, admin_menu
from tg_bot.aiogram_bot.network.dto.response import Response
from tg_bot.aiogram_bot.network.dto.user import UserSchema
from tg_bot.aiogram_bot.states.users import User
from tg_bot.aiogram_bot.utils.constants import NewsChannel


async def bot_start(message: types.Message, state: FSMContext):
    await state.reset_state()

    params = {"key": "id",
              "value": message.from_user.id}
    user_response: Response[UserSchema] = Response[UserSchema].model_validate(
        await user_api.get_one_by_key_value(params=params))

    status = user_response.status

    _ = message.bot.get("lang")
    text = _("<b>Harvestly</b> - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π –±–æ—Ç –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Ä–∞–±–æ—Ç—É –ø–∞—Ä—Å–∏–Ω–≥–æ–º –∏ ChatGPT\n\n \
<b>–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç:</b>\n\n \
üïï –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Ö–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö\n\n \
üóë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å –∏—Ö –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é \n\n \
üßë‚Äçüé® –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–æ—Å—Ç—ã –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ \n\n \
üì° –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–∞—Ä—Å–∏–Ω–≥–æ–º –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ Telegram \n\n \
‚õì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –¥–æ–±–∞—è–ª—è—Ç—å –ø—Ä–æ–º–ø—Ç—ã ChatGPT –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–≤–æ–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ \n\n \
–ù–æ–≤–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ - {}").format(NewsChannel)

    user_id = message.from_user.id
    if status == "success":
        # admins_list = [1574853044, 1696518783]
        admins_list = [1696518783]
        if user_id in admins_list:
            menu = admin_menu
        else:
            menu = m_menu
        await message.bot.send_message(user_id, f"{text}", reply_markup=menu)
        # await message.bot.send_message(user_id, f"{test}")
    else:
        # await message.bot.send_message(user_id, f"{text}")
        await message.answer(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! {message.from_user.full_name}\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\n\nAssalomu alaykum!\nTilni tanlang:",
            reply_markup=lang)
        await User.Lang.set()


# User.Lang
async def info_lang(message: types.Message, state: FSMContext):
    if message.text == "üá∑üá∫ Ru":
        language = "ru"
    else:
        language = "uz"
    await state.update_data(lang=language)
    await User.Next.set()
    await info_next(message, state)


# User.Next
async def info_next(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("lang")
    data = {"id": message.from_user.id, "time_zone": 0, "lang": language}
    user_response: Response[UserSchema] = Response[UserSchema].model_validate(await user_api.post_add(data=data))
    await bot_start(message, state)


def register_start(dp: Dispatcher):
    dp.register_message_handler(bot_start, CommandStart(), state="*")
    dp.register_message_handler(info_lang, state=User.Lang, text=["üá∫üáø Uz", "üá∑üá∫ Ru"])
    dp.register_message_handler(info_next, state=User.Next)
